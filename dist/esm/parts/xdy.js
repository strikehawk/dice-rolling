import { DiceExpressionBase } from "./dice-expression-base";
const CAPTURE_GROUP = "XdY";
export class XdYRollPart extends DiceExpressionBase {
    constructor(expression) {
        super(expression);
    }
    static match(array) {
        return array && array.groups && !!array.groups[CAPTURE_GROUP];
    }
    static parse(array) {
        const match = array && array.groups && array.groups[CAPTURE_GROUP];
        if (!match) {
            return null;
        }
        return new XdYRollPart(match);
    }
    roll() {
        const dice = [];
        for (let i = 0; i < this._x; i++) {
            dice.push(this._rollDie(this._y));
        }
        this._value = dice.reduce((prev, current) => prev + current, 0);
        this._dice = dice;
    }
    _parse(expression) {
        const resultArray = XdYRollPart._regexp.exec(expression);
        this._x = parseInt(resultArray.groups["X"]);
        this._y = parseInt(resultArray.groups["Y"]);
    }
}
XdYRollPart.CAPTURE_GROUP = CAPTURE_GROUP;
XdYRollPart.REGEX_PATTERN = "\\d+d\\d+";
XdYRollPart.CAPTURE_PATTERN = `(?<${XdYRollPart.CAPTURE_GROUP}>${XdYRollPart.REGEX_PATTERN})`;
XdYRollPart._regexp = new RegExp("^(?<X>\\d+)d(?<Y>\\d+)$");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3BhcnRzL3hkeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUc1RCxNQUFNLGFBQWEsR0FBVyxLQUFLLENBQUM7QUFFcEMsTUFBTSxPQUFPLFdBQVksU0FBUSxrQkFBa0I7SUF3Qi9DLFlBQVksVUFBa0I7UUFDMUIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFyQk0sTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFrQjtRQUNsQyxPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQWtCO1FBQ2xDLE1BQU0sS0FBSyxHQUFXLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFM0UsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFXTSxJQUFJO1FBQ1AsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO1FBRTFCLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNyQztRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQztJQUVTLE1BQU0sQ0FBQyxVQUFrQjtRQUMvQixNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7O0FBMUNzQix5QkFBYSxHQUFXLGFBQWEsQ0FBQztBQUN0Qyx5QkFBYSxHQUFXLFdBQVcsQ0FBQztBQUNwQywyQkFBZSxHQUFXLE1BQU0sV0FBVyxDQUFDLGFBQWEsSUFBSSxXQUFXLENBQUMsYUFBYSxHQUFHLENBQUM7QUFnQmxHLG1CQUFPLEdBQVcsSUFBSSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpY2VFeHByZXNzaW9uQmFzZSB9IGZyb20gXCIuL2RpY2UtZXhwcmVzc2lvbi1iYXNlXCI7XHJcbmltcG9ydCB7IFJlZ0V4cEFycmF5IH0gZnJvbSBcIi4vcm9sbC1wYXJ0XCI7XHJcblxyXG5jb25zdCBDQVBUVVJFX0dST1VQOiBzdHJpbmcgPSBcIlhkWVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFhkWVJvbGxQYXJ0IGV4dGVuZHMgRGljZUV4cHJlc3Npb25CYXNlIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ0FQVFVSRV9HUk9VUDogc3RyaW5nID0gQ0FQVFVSRV9HUk9VUDtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUkVHRVhfUEFUVEVSTjogc3RyaW5nID0gXCJcXFxcZCtkXFxcXGQrXCI7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENBUFRVUkVfUEFUVEVSTjogc3RyaW5nID0gYCg/PCR7WGRZUm9sbFBhcnQuQ0FQVFVSRV9HUk9VUH0+JHtYZFlSb2xsUGFydC5SRUdFWF9QQVRURVJOfSlgO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbWF0Y2goYXJyYXk6IFJlZ0V4cEFycmF5KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5Lmdyb3VwcyAmJiAhIWFycmF5Lmdyb3Vwc1tDQVBUVVJFX0dST1VQXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZShhcnJheTogUmVnRXhwQXJyYXkpOiBYZFlSb2xsUGFydCB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2g6IHN0cmluZyA9IGFycmF5ICYmIGFycmF5Lmdyb3VwcyAmJiBhcnJheS5ncm91cHNbQ0FQVFVSRV9HUk9VUF07XHJcblxyXG4gICAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFhkWVJvbGxQYXJ0KG1hdGNoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfcmVnZXhwOiBSZWdFeHAgPSBuZXcgUmVnRXhwKFwiXig/PFg+XFxcXGQrKWQoPzxZPlxcXFxkKykkXCIpO1xyXG5cclxuICAgIHByaXZhdGUgX3g6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3k6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihleHByZXNzaW9uOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihleHByZXNzaW9uKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHJvbGwoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZGljZTogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuX3g7IGkrKykge1xyXG4gICAgICAgICAgICBkaWNlLnB1c2godGhpcy5fcm9sbERpZSh0aGlzLl95KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IGRpY2UucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiBwcmV2ICsgY3VycmVudCwgMCk7XHJcbiAgICAgICAgdGhpcy5fZGljZSA9IGRpY2U7XHJcbiAgICB9ICAgXHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBfcGFyc2UoZXhwcmVzc2lvbjogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0QXJyYXkgPSBYZFlSb2xsUGFydC5fcmVnZXhwLmV4ZWMoZXhwcmVzc2lvbik7XHJcbiAgICAgICAgdGhpcy5feCA9IHBhcnNlSW50KHJlc3VsdEFycmF5Lmdyb3Vwc1tcIlhcIl0pO1xyXG4gICAgICAgIHRoaXMuX3kgPSBwYXJzZUludChyZXN1bHRBcnJheS5ncm91cHNbXCJZXCJdKTtcclxuICAgIH1cclxufVxyXG4iXX0=