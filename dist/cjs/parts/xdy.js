"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XdYRollPart = void 0;
const dice_expression_base_1 = require("./dice-expression-base");
const CAPTURE_GROUP = "XdY";
class XdYRollPart extends dice_expression_base_1.DiceExpressionBase {
    constructor(expression) {
        super(expression);
    }
    static match(array) {
        return array && array.groups && !!array.groups[CAPTURE_GROUP];
    }
    static parse(array) {
        const match = array && array.groups && array.groups[CAPTURE_GROUP];
        if (!match) {
            return null;
        }
        return new XdYRollPart(match);
    }
    roll() {
        const dice = [];
        for (let i = 0; i < this._x; i++) {
            dice.push(this._rollDie(this._y));
        }
        this._value = dice.reduce((prev, current) => prev + current, 0);
        this._dice = dice;
    }
    _parse(expression) {
        const resultArray = XdYRollPart._regexp.exec(expression);
        this._x = parseInt(resultArray.groups["X"]);
        this._y = parseInt(resultArray.groups["Y"]);
    }
}
exports.XdYRollPart = XdYRollPart;
XdYRollPart.CAPTURE_GROUP = CAPTURE_GROUP;
XdYRollPart.REGEX_PATTERN = "\\d+d\\d+";
XdYRollPart.CAPTURE_PATTERN = `(?<${XdYRollPart.CAPTURE_GROUP}>${XdYRollPart.REGEX_PATTERN})`;
XdYRollPart._regexp = new RegExp("^(?<X>\\d+)d(?<Y>\\d+)$");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3BhcnRzL3hkeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpRUFBNEQ7QUFHNUQsTUFBTSxhQUFhLEdBQVcsS0FBSyxDQUFDO0FBRXBDLE1BQWEsV0FBWSxTQUFRLHlDQUFrQjtJQXdCL0MsWUFBWSxVQUFrQjtRQUMxQixLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQXJCTSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQWtCO1FBQ2xDLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBa0I7UUFDbEMsTUFBTSxLQUFLLEdBQVcsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUzRSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1IsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQVdNLElBQUk7UUFDUCxNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7UUFFMUIsS0FBSyxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBRVMsTUFBTSxDQUFDLFVBQWtCO1FBQy9CLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7QUEzQ0wsa0NBNENDO0FBM0MwQix5QkFBYSxHQUFXLGFBQWEsQ0FBQztBQUN0Qyx5QkFBYSxHQUFXLFdBQVcsQ0FBQztBQUNwQywyQkFBZSxHQUFXLE1BQU0sV0FBVyxDQUFDLGFBQWEsSUFBSSxXQUFXLENBQUMsYUFBYSxHQUFHLENBQUM7QUFnQmxHLG1CQUFPLEdBQVcsSUFBSSxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpY2VFeHByZXNzaW9uQmFzZSB9IGZyb20gXCIuL2RpY2UtZXhwcmVzc2lvbi1iYXNlXCI7XHJcbmltcG9ydCB7IFJlZ0V4cEFycmF5IH0gZnJvbSBcIi4vcm9sbC1wYXJ0XCI7XHJcblxyXG5jb25zdCBDQVBUVVJFX0dST1VQOiBzdHJpbmcgPSBcIlhkWVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFhkWVJvbGxQYXJ0IGV4dGVuZHMgRGljZUV4cHJlc3Npb25CYXNlIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ0FQVFVSRV9HUk9VUDogc3RyaW5nID0gQ0FQVFVSRV9HUk9VUDtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUkVHRVhfUEFUVEVSTjogc3RyaW5nID0gXCJcXFxcZCtkXFxcXGQrXCI7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENBUFRVUkVfUEFUVEVSTjogc3RyaW5nID0gYCg/PCR7WGRZUm9sbFBhcnQuQ0FQVFVSRV9HUk9VUH0+JHtYZFlSb2xsUGFydC5SRUdFWF9QQVRURVJOfSlgO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbWF0Y2goYXJyYXk6IFJlZ0V4cEFycmF5KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5ICYmIGFycmF5Lmdyb3VwcyAmJiAhIWFycmF5Lmdyb3Vwc1tDQVBUVVJFX0dST1VQXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHN0YXRpYyBwYXJzZShhcnJheTogUmVnRXhwQXJyYXkpOiBYZFlSb2xsUGFydCB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2g6IHN0cmluZyA9IGFycmF5ICYmIGFycmF5Lmdyb3VwcyAmJiBhcnJheS5ncm91cHNbQ0FQVFVSRV9HUk9VUF07XHJcblxyXG4gICAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFhkWVJvbGxQYXJ0KG1hdGNoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfcmVnZXhwOiBSZWdFeHAgPSBuZXcgUmVnRXhwKFwiXig/PFg+XFxcXGQrKWQoPzxZPlxcXFxkKykkXCIpO1xyXG5cclxuICAgIHByaXZhdGUgX3g6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3k6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihleHByZXNzaW9uOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihleHByZXNzaW9uKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHJvbGwoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZGljZTogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuX3g7IGkrKykge1xyXG4gICAgICAgICAgICBkaWNlLnB1c2godGhpcy5fcm9sbERpZSh0aGlzLl95KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl92YWx1ZSA9IGRpY2UucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiBwcmV2ICsgY3VycmVudCwgMCk7XHJcbiAgICAgICAgdGhpcy5fZGljZSA9IGRpY2U7XHJcbiAgICB9ICAgXHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBfcGFyc2UoZXhwcmVzc2lvbjogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0QXJyYXkgPSBYZFlSb2xsUGFydC5fcmVnZXhwLmV4ZWMoZXhwcmVzc2lvbik7XHJcbiAgICAgICAgdGhpcy5feCA9IHBhcnNlSW50KHJlc3VsdEFycmF5Lmdyb3Vwc1tcIlhcIl0pO1xyXG4gICAgICAgIHRoaXMuX3kgPSBwYXJzZUludChyZXN1bHRBcnJheS5ncm91cHNbXCJZXCJdKTtcclxuICAgIH1cclxufVxyXG4iXX0=